   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	toggle_e:
  12               	.LFB7:
  13               		.file 1 "lcd.c"
   1:lcd.c         **** /****************************************************************************
   2:lcd.c         ****  Title:     HD44780U LCD library
   3:lcd.c         ****  Author:    Peter Fleury <pfleury@gmx.ch>  http://tinyurl.com/peterfleury
   4:lcd.c         ****  File:	    $Id: lcd.c,v 1.15.2.2 2015/01/17 12:16:05 peter Exp $
   5:lcd.c         ****  Software:  AVR-GCC 3.3 
   6:lcd.c         ****  Target:    any AVR device, memory mapped mode only for AT90S4414/8515/Mega
   7:lcd.c         **** 
   8:lcd.c         ****  DESCRIPTION
   9:lcd.c         ****        Basic routines for interfacing a HD44780U-based text lcd display
  10:lcd.c         **** 
  11:lcd.c         ****        Originally based on Volker Oth's lcd library,
  12:lcd.c         ****        changed lcd_init(), added additional constants for lcd_command(),
  13:lcd.c         ****        added 4-bit I/O mode, improved and optimized code.
  14:lcd.c         **** 
  15:lcd.c         ****        Library can be operated in memory mapped mode (LCD_IO_MODE=0) or in 
  16:lcd.c         ****        4-bit IO port mode (LCD_IO_MODE=1). 8-bit IO port mode not supported.
  17:lcd.c         ****        
  18:lcd.c         ****        Memory mapped mode compatible with Kanda STK200, but supports also
  19:lcd.c         ****        generation of R/W signal through A8 address line.
  20:lcd.c         **** 
  21:lcd.c         ****  USAGE
  22:lcd.c         ****        See the C include lcd.h file for a description of each function
  23:lcd.c         ****        
  24:lcd.c         **** *****************************************************************************/
  25:lcd.c         **** #include <inttypes.h>
  26:lcd.c         **** #include <avr/io.h>
  27:lcd.c         **** #include <avr/pgmspace.h>
  28:lcd.c         **** #include <util/delay.h>
  29:lcd.c         **** #include "lcd.h"
  30:lcd.c         **** 
  31:lcd.c         **** 
  32:lcd.c         **** 
  33:lcd.c         **** /* 
  34:lcd.c         **** ** constants/macros 
  35:lcd.c         **** */
  36:lcd.c         **** #define DDR(x) (*(&x - 1))      /* address of data direction register of port x */
  37:lcd.c         **** #if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  38:lcd.c         ****     /* on ATmega64/128 PINF is on port 0x00 and not 0x60 */
  39:lcd.c         ****     #define PIN(x) ( &PORTF==&(x) ? _SFR_IO8(0x00) : (*(&x - 2)) )
  40:lcd.c         **** #else
  41:lcd.c         **** 	#define PIN(x) (*(&x - 2))    /* address of input register of port x          */
  42:lcd.c         **** #endif
  43:lcd.c         **** 
  44:lcd.c         **** 
  45:lcd.c         **** #if LCD_IO_MODE
  46:lcd.c         **** #define lcd_e_delay()   _delay_us(LCD_DELAY_ENABLE_PULSE)
  47:lcd.c         **** #define lcd_e_high()    LCD_E_PORT  |=  _BV(LCD_E_PIN);
  48:lcd.c         **** #define lcd_e_low()     LCD_E_PORT  &= ~_BV(LCD_E_PIN);
  49:lcd.c         **** #define lcd_e_toggle()  toggle_e()
  50:lcd.c         **** #define lcd_rw_high()   LCD_RW_PORT |=  _BV(LCD_RW_PIN)
  51:lcd.c         **** #define lcd_rw_low()    LCD_RW_PORT &= ~_BV(LCD_RW_PIN)
  52:lcd.c         **** #define lcd_rs_high()   LCD_RS_PORT |=  _BV(LCD_RS_PIN)
  53:lcd.c         **** #define lcd_rs_low()    LCD_RS_PORT &= ~_BV(LCD_RS_PIN)
  54:lcd.c         **** #endif
  55:lcd.c         **** 
  56:lcd.c         **** #if LCD_IO_MODE
  57:lcd.c         **** #if LCD_LINES==1
  58:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_1LINE 
  59:lcd.c         **** #else
  60:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES 
  61:lcd.c         **** #endif
  62:lcd.c         **** #else
  63:lcd.c         **** #if LCD_LINES==1
  64:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_1LINE
  65:lcd.c         **** #else
  66:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_2LINES
  67:lcd.c         **** #endif
  68:lcd.c         **** #endif
  69:lcd.c         **** 
  70:lcd.c         **** #if LCD_CONTROLLER_KS0073
  71:lcd.c         **** #if LCD_LINES==4
  72:lcd.c         **** 
  73:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_ON  0x2C   /* |0|010|1100 4-bit mode, extension-bit RE = 
  74:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_OFF 0x28   /* |0|010|1000 4-bit mode, extension-bit RE = 
  75:lcd.c         **** #define KS0073_4LINES_MODE                    0x09   /* |0|000|1001 4 lines mode */
  76:lcd.c         **** 
  77:lcd.c         **** #endif
  78:lcd.c         **** #endif
  79:lcd.c         **** 
  80:lcd.c         **** /* 
  81:lcd.c         **** ** function prototypes 
  82:lcd.c         **** */
  83:lcd.c         **** #if LCD_IO_MODE
  84:lcd.c         **** static void toggle_e(void);
  85:lcd.c         **** #endif
  86:lcd.c         **** 
  87:lcd.c         **** /*
  88:lcd.c         **** ** local functions
  89:lcd.c         **** */
  90:lcd.c         **** 
  91:lcd.c         **** 
  92:lcd.c         **** /************************************************************************* 
  93:lcd.c         **** delay for a minimum of <us> microseconds
  94:lcd.c         **** the number of loops is calculated at compile-time from MCU clock frequency
  95:lcd.c         **** *************************************************************************/
  96:lcd.c         **** #define delay(us)  _delay_us(us) 
  97:lcd.c         **** 
  98:lcd.c         **** 
  99:lcd.c         **** #if LCD_IO_MODE
 100:lcd.c         **** /* toggle Enable Pin to initiate write */
 101:lcd.c         **** static void toggle_e(void)
 102:lcd.c         **** {
  14               		.loc 1 102 0
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
 103:lcd.c         ****     lcd_e_high();
  20               		.loc 1 103 0
  21 0000 429A      		sbi 0x8,2
  22               	.LVL0:
  23               	.LBB28:
  24               	.LBB29:
  25               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/lib/avr/include/util/delay.h **** 
 166:/usr/lib/avr/include/util/delay.h **** #else
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/avr/include/util/delay.h **** 
 235:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/avr/include/util/delay.h **** 
 238:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h **** 	#else
 242:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/avr/include/util/delay.h **** 	#endif
 245:/usr/lib/avr/include/util/delay.h **** 
 246:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  26               		.loc 2 246 0
  27 0002 85E0      		ldi r24,lo8(5)
  28 0004 8A95      		1: dec r24
  29 0006 01F4      		brne 1b
  30 0008 0000      		nop
  31               	.LBE29:
  32               	.LBE28:
 104:lcd.c         ****     lcd_e_delay();
 105:lcd.c         ****     lcd_e_low();
  33               		.loc 1 105 0
  34 000a 4298      		cbi 0x8,2
  35 000c 0895      		ret
  36               		.cfi_endproc
  37               	.LFE7:
  40               	lcd_write:
  41               	.LFB8:
 106:lcd.c         **** }
 107:lcd.c         **** #endif
 108:lcd.c         **** 
 109:lcd.c         **** 
 110:lcd.c         **** /*************************************************************************
 111:lcd.c         **** Low-level function to write byte to LCD controller
 112:lcd.c         **** Input:    data   byte to write to LCD
 113:lcd.c         ****           rs     1: write data    
 114:lcd.c         ****                  0: write instruction
 115:lcd.c         **** Returns:  none
 116:lcd.c         **** *************************************************************************/
 117:lcd.c         **** #if LCD_IO_MODE
 118:lcd.c         **** static void lcd_write(uint8_t data,uint8_t rs) 
 119:lcd.c         **** {
  42               		.loc 1 119 0
  43               		.cfi_startproc
  44               	.LVL1:
  45 000e CF93      		push r28
  46               	.LCFI0:
  47               		.cfi_def_cfa_offset 3
  48               		.cfi_offset 28, -2
  49 0010 DF93      		push r29
  50               	.LCFI1:
  51               		.cfi_def_cfa_offset 4
  52               		.cfi_offset 29, -3
  53 0012 1F92      		push __zero_reg__
  54               	.LCFI2:
  55               		.cfi_def_cfa_offset 5
  56 0014 CDB7      		in r28,__SP_L__
  57 0016 DEB7      		in r29,__SP_H__
  58               	.LCFI3:
  59               		.cfi_def_cfa_register 28
  60               	/* prologue: function */
  61               	/* frame size = 1 */
  62               	/* stack size = 3 */
  63               	.L__stack_usage = 3
 120:lcd.c         ****     unsigned char dataBits ;
 121:lcd.c         **** 
 122:lcd.c         **** 
 123:lcd.c         ****     if (rs) {        /* write data        (RS=1, RW=0) */
  64               		.loc 1 123 0
  65 0018 6623      		tst r22
  66 001a 01F0      		breq .L3
 124:lcd.c         ****        lcd_rs_high();
  67               		.loc 1 124 0
  68 001c 409A      		sbi 0x8,0
  69 001e 00C0      		rjmp .L4
  70               	.L3:
 125:lcd.c         ****     } else {         /* write instruction (RS=0, RW=0) */
 126:lcd.c         ****        lcd_rs_low();
  71               		.loc 1 126 0
  72 0020 4098      		cbi 0x8,0
  73               	.L4:
 127:lcd.c         ****     }
 128:lcd.c         ****     lcd_rw_low();    /* RW=0  write mode      */
  74               		.loc 1 128 0
  75 0022 4198      		cbi 0x8,1
 129:lcd.c         **** 
 130:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 131:lcd.c         ****       && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 
 132:lcd.c         ****     {
 133:lcd.c         ****         /* configure data pins as output */
 134:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
 135:lcd.c         **** 
 136:lcd.c         ****         /* output high nibble first */
 137:lcd.c         ****         dataBits = LCD_DATA0_PORT & 0xF0;
 138:lcd.c         ****         LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 139:lcd.c         ****         lcd_e_toggle();
 140:lcd.c         **** 
 141:lcd.c         ****         /* output low nibble */
 142:lcd.c         ****         LCD_DATA0_PORT = dataBits | (data&0x0F);
 143:lcd.c         ****         lcd_e_toggle();
 144:lcd.c         **** 
 145:lcd.c         ****         /* all data pins high (inactive) */
 146:lcd.c         ****         LCD_DATA0_PORT = dataBits | 0x0F;
 147:lcd.c         ****     }
 148:lcd.c         ****     else
 149:lcd.c         ****     {
 150:lcd.c         ****         /* configure data pins as output */
 151:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  76               		.loc 1 151 0
  77 0024 529A      		sbi 0xa,2
 152:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  78               		.loc 1 152 0
  79 0026 539A      		sbi 0xa,3
 153:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  80               		.loc 1 153 0
  81 0028 549A      		sbi 0xa,4
 154:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  82               		.loc 1 154 0
  83 002a 559A      		sbi 0xa,5
 155:lcd.c         ****         
 156:lcd.c         ****         /* output high nibble first */
 157:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  84               		.loc 1 157 0
  85 002c 5D98      		cbi 0xb,5
 158:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  86               		.loc 1 158 0
  87 002e 5C98      		cbi 0xb,4
 159:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  88               		.loc 1 159 0
  89 0030 5B98      		cbi 0xb,3
 160:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  90               		.loc 1 160 0
  91 0032 5A98      		cbi 0xb,2
 161:lcd.c         ****     	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  92               		.loc 1 161 0
  93 0034 87FD      		sbrc r24,7
  94               		.loc 1 161 0 is_stmt 0 discriminator 1
  95 0036 5D9A      		sbi 0xb,5
  96               	.L5:
 162:lcd.c         ****     	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  97               		.loc 1 162 0 is_stmt 1
  98 0038 86FD      		sbrc r24,6
  99               		.loc 1 162 0 is_stmt 0 discriminator 1
 100 003a 5C9A      		sbi 0xb,4
 101               	.L6:
 163:lcd.c         ****     	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 102               		.loc 1 163 0 is_stmt 1
 103 003c 85FD      		sbrc r24,5
 104               		.loc 1 163 0 is_stmt 0 discriminator 1
 105 003e 5B9A      		sbi 0xb,3
 106               	.L7:
 164:lcd.c         ****     	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 107               		.loc 1 164 0 is_stmt 1
 108 0040 84FD      		sbrc r24,4
 109               		.loc 1 164 0 is_stmt 0 discriminator 1
 110 0042 5A9A      		sbi 0xb,2
 111               	.L8:
 165:lcd.c         ****         lcd_e_toggle();
 112               		.loc 1 165 0 is_stmt 1
 113 0044 8983      		std Y+1,r24
 114 0046 0E94 0000 		call toggle_e
 115               	.LVL2:
 166:lcd.c         ****         
 167:lcd.c         ****         /* output low nibble */
 168:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 116               		.loc 1 168 0
 117 004a 5D98      		cbi 0xb,5
 169:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 118               		.loc 1 169 0
 119 004c 5C98      		cbi 0xb,4
 170:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 120               		.loc 1 170 0
 121 004e 5B98      		cbi 0xb,3
 171:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 122               		.loc 1 171 0
 123 0050 5A98      		cbi 0xb,2
 172:lcd.c         ****     	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 124               		.loc 1 172 0
 125 0052 8981      		ldd r24,Y+1
 126 0054 83FD      		sbrc r24,3
 127               		.loc 1 172 0 is_stmt 0 discriminator 1
 128 0056 5D9A      		sbi 0xb,5
 129               	.L9:
 173:lcd.c         ****     	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 130               		.loc 1 173 0 is_stmt 1
 131 0058 82FD      		sbrc r24,2
 132               		.loc 1 173 0 is_stmt 0 discriminator 1
 133 005a 5C9A      		sbi 0xb,4
 134               	.L10:
 174:lcd.c         ****     	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 135               		.loc 1 174 0 is_stmt 1
 136 005c 81FD      		sbrc r24,1
 137               		.loc 1 174 0 is_stmt 0 discriminator 1
 138 005e 5B9A      		sbi 0xb,3
 139               	.L11:
 175:lcd.c         ****     	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 140               		.loc 1 175 0 is_stmt 1
 141 0060 80FD      		sbrc r24,0
 142               		.loc 1 175 0 is_stmt 0 discriminator 1
 143 0062 5A9A      		sbi 0xb,2
 144               	.L12:
 176:lcd.c         ****         lcd_e_toggle();        
 145               		.loc 1 176 0 is_stmt 1
 146 0064 0E94 0000 		call toggle_e
 147               	.LVL3:
 177:lcd.c         ****         
 178:lcd.c         ****         /* all data pins high (inactive) */
 179:lcd.c         ****         LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 148               		.loc 1 179 0
 149 0068 5A9A      		sbi 0xb,2
 180:lcd.c         ****         LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 150               		.loc 1 180 0
 151 006a 5B9A      		sbi 0xb,3
 181:lcd.c         ****         LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 152               		.loc 1 181 0
 153 006c 5C9A      		sbi 0xb,4
 182:lcd.c         ****         LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 154               		.loc 1 182 0
 155 006e 5D9A      		sbi 0xb,5
 156               	/* epilogue start */
 183:lcd.c         ****     }
 184:lcd.c         **** }
 157               		.loc 1 184 0
 158 0070 0F90      		pop __tmp_reg__
 159 0072 DF91      		pop r29
 160 0074 CF91      		pop r28
 161 0076 0895      		ret
 162               		.cfi_endproc
 163               	.LFE8:
 166               	lcd_read.constprop.0:
 167               	.LFB22:
 185:lcd.c         **** #else
 186:lcd.c         **** #define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LC
 187:lcd.c         **** /* rs==0 -> write instruction to LCD_IO_FUNCTION */
 188:lcd.c         **** /* rs==1 -> write data to LCD_IO_DATA */
 189:lcd.c         **** #endif
 190:lcd.c         **** 
 191:lcd.c         **** 
 192:lcd.c         **** /*************************************************************************
 193:lcd.c         **** Low-level function to read byte from LCD controller
 194:lcd.c         **** Input:    rs     1: read data    
 195:lcd.c         ****                  0: read busy flag / address counter
 196:lcd.c         **** Returns:  byte read from LCD controller
 197:lcd.c         **** *************************************************************************/
 198:lcd.c         **** #if LCD_IO_MODE
 199:lcd.c         **** static uint8_t lcd_read(uint8_t rs) 
 168               		.loc 1 199 0
 169               		.cfi_startproc
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 174               	.LVL4:
 200:lcd.c         **** {
 201:lcd.c         ****     uint8_t data;
 202:lcd.c         ****     
 203:lcd.c         ****     
 204:lcd.c         ****     if (rs)
 205:lcd.c         ****         lcd_rs_high();                       /* RS=1: read data      */
 206:lcd.c         ****     else
 207:lcd.c         ****         lcd_rs_low();                        /* RS=0: read busy flag */
 175               		.loc 1 207 0
 176 0078 4098      		cbi 0x8,0
 208:lcd.c         ****     lcd_rw_high();                           /* RW=1  read mode      */
 177               		.loc 1 208 0
 178 007a 419A      		sbi 0x8,1
 209:lcd.c         ****     
 210:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 211:lcd.c         ****       && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 212:lcd.c         ****     {
 213:lcd.c         ****         DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 214:lcd.c         ****         
 215:lcd.c         ****         lcd_e_high();
 216:lcd.c         ****         lcd_e_delay();        
 217:lcd.c         ****         data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 218:lcd.c         ****         lcd_e_low();
 219:lcd.c         ****         
 220:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 221:lcd.c         ****         
 222:lcd.c         ****         lcd_e_high();
 223:lcd.c         ****         lcd_e_delay();
 224:lcd.c         ****         data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 225:lcd.c         ****         lcd_e_low();
 226:lcd.c         ****     }
 227:lcd.c         ****     else
 228:lcd.c         ****     {
 229:lcd.c         ****         /* configure data pins as input */
 230:lcd.c         ****         DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 179               		.loc 1 230 0
 180 007c 5298      		cbi 0xa,2
 231:lcd.c         ****         DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 181               		.loc 1 231 0
 182 007e 5398      		cbi 0xa,3
 232:lcd.c         ****         DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 183               		.loc 1 232 0
 184 0080 5498      		cbi 0xa,4
 233:lcd.c         ****         DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 185               		.loc 1 233 0
 186 0082 5598      		cbi 0xa,5
 234:lcd.c         ****                 
 235:lcd.c         ****         /* read high nibble first */
 236:lcd.c         ****         lcd_e_high();
 187               		.loc 1 236 0
 188 0084 429A      		sbi 0x8,2
 189               	.LVL5:
 190               	.LBB30:
 191               	.LBB31:
 192               		.loc 2 246 0
 193 0086 85E0      		ldi r24,lo8(5)
 194 0088 8A95      		1: dec r24
 195 008a 01F4      		brne 1b
 196 008c 0000      		nop
 197               	.LVL6:
 198               	.LBE31:
 199               	.LBE30:
 237:lcd.c         ****         lcd_e_delay();        
 238:lcd.c         ****         data = 0;
 239:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 200               		.loc 1 239 0
 201 008e 4A99      		sbic 0x9,2
 202 0090 00C0      		rjmp .L44
 238:lcd.c         ****         data = 0;
 203               		.loc 1 238 0
 204 0092 80E0      		ldi r24,0
 205 0094 00C0      		rjmp .L36
 206               	.L44:
 207               		.loc 1 239 0
 208 0096 80E1      		ldi r24,lo8(16)
 209               	.L36:
 210               	.LVL7:
 240:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 211               		.loc 1 240 0
 212 0098 4B99      		sbic 0x9,3
 213 009a 8062      		ori r24,lo8(32)
 214               	.LVL8:
 215               	.L37:
 241:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 216               		.loc 1 241 0
 217 009c 4C99      		sbic 0x9,4
 218 009e 8064      		ori r24,lo8(64)
 219               	.LVL9:
 220               	.L38:
 242:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 221               		.loc 1 242 0
 222 00a0 4D99      		sbic 0x9,5
 223 00a2 8068      		ori r24,lo8(-128)
 224               	.LVL10:
 225               	.L39:
 243:lcd.c         ****         lcd_e_low();
 226               		.loc 1 243 0
 227 00a4 4298      		cbi 0x8,2
 228               	.LVL11:
 229               	.LBB32:
 230               	.LBB33:
 231               		.loc 2 246 0
 232 00a6 95E0      		ldi r25,lo8(5)
 233 00a8 9A95      		1: dec r25
 234 00aa 01F4      		brne 1b
 235 00ac 0000      		nop
 236               	.LBE33:
 237               	.LBE32:
 244:lcd.c         **** 
 245:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 246:lcd.c         ****     
 247:lcd.c         ****         /* read low nibble */    
 248:lcd.c         ****         lcd_e_high();
 238               		.loc 1 248 0
 239 00ae 429A      		sbi 0x8,2
 240               	.LVL12:
 241               	.LBB34:
 242               	.LBB35:
 243               		.loc 2 246 0
 244 00b0 95E0      		ldi r25,lo8(5)
 245 00b2 9A95      		1: dec r25
 246 00b4 01F4      		brne 1b
 247 00b6 0000      		nop
 248               	.LBE35:
 249               	.LBE34:
 249:lcd.c         ****         lcd_e_delay();
 250:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 250               		.loc 1 250 0
 251 00b8 4A99      		sbic 0x9,2
 252 00ba 8160      		ori r24,lo8(1)
 253               	.LVL13:
 254               	.L40:
 251:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 255               		.loc 1 251 0
 256 00bc 4B99      		sbic 0x9,3
 257 00be 8260      		ori r24,lo8(2)
 258               	.LVL14:
 259               	.L41:
 252:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 260               		.loc 1 252 0
 261 00c0 4C99      		sbic 0x9,4
 262 00c2 8460      		ori r24,lo8(4)
 263               	.LVL15:
 264               	.L42:
 253:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 265               		.loc 1 253 0
 266 00c4 4D99      		sbic 0x9,5
 267 00c6 8860      		ori r24,lo8(8)
 268               	.LVL16:
 269               	.L43:
 254:lcd.c         ****         lcd_e_low();
 270               		.loc 1 254 0
 271 00c8 4298      		cbi 0x8,2
 255:lcd.c         ****     }
 256:lcd.c         ****     return data;
 257:lcd.c         **** }
 272               		.loc 1 257 0
 273 00ca 0895      		ret
 274               		.cfi_endproc
 275               	.LFE22:
 278               	lcd_waitbusy:
 279               	.LFB10:
 258:lcd.c         **** #else
 259:lcd.c         **** #define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LC
 260:lcd.c         **** /* rs==0 -> read instruction from LCD_IO_FUNCTION */
 261:lcd.c         **** /* rs==1 -> read data from LCD_IO_DATA */
 262:lcd.c         **** #endif
 263:lcd.c         **** 
 264:lcd.c         **** 
 265:lcd.c         **** /*************************************************************************
 266:lcd.c         **** loops while lcd is busy, returns address counter
 267:lcd.c         **** *************************************************************************/
 268:lcd.c         **** static uint8_t lcd_waitbusy(void)
 269:lcd.c         **** 
 270:lcd.c         **** {
 280               		.loc 1 270 0
 281               		.cfi_startproc
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 0 */
 285               	.L__stack_usage = 0
 286               	.L68:
 271:lcd.c         ****     register uint8_t c;
 272:lcd.c         ****     
 273:lcd.c         ****     /* wait until busy flag is cleared */
 274:lcd.c         ****     while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 287               		.loc 1 274 0 discriminator 1
 288 00cc 0E94 0000 		call lcd_read.constprop.0
 289               	.LVL17:
 290 00d0 87FD      		sbrc r24,7
 291 00d2 00C0      		rjmp .L68
 292               	.LVL18:
 293               	.LBB36:
 294               	.LBB37:
 295               		.loc 2 246 0
 296 00d4 85E1      		ldi r24,lo8(21)
 297 00d6 8A95      		1: dec r24
 298 00d8 01F4      		brne 1b
 299               	.LVL19:
 300 00da 0000      		nop
 301               	.LBE37:
 302               	.LBE36:
 275:lcd.c         ****     
 276:lcd.c         ****     /* the address counter is updated 4us after the busy flag is cleared */
 277:lcd.c         ****     delay(LCD_DELAY_BUSY_FLAG);
 278:lcd.c         **** 
 279:lcd.c         ****     /* now read the address counter */
 280:lcd.c         ****     return (lcd_read(0));  // return address counter
 303               		.loc 1 280 0
 304 00dc 0C94 0000 		jmp lcd_read.constprop.0
 305               	.LVL20:
 306               		.cfi_endproc
 307               	.LFE10:
 309               	.global	lcd_command
 311               	lcd_command:
 312               	.LFB12:
 281:lcd.c         ****     
 282:lcd.c         **** }/* lcd_waitbusy */
 283:lcd.c         **** 
 284:lcd.c         **** 
 285:lcd.c         **** /*************************************************************************
 286:lcd.c         **** Move cursor to the start of next line or to the first line if the cursor 
 287:lcd.c         **** is already on the last line.
 288:lcd.c         **** *************************************************************************/
 289:lcd.c         **** static inline void lcd_newline(uint8_t pos)
 290:lcd.c         **** {
 291:lcd.c         ****     register uint8_t addressCounter;
 292:lcd.c         **** 
 293:lcd.c         **** 
 294:lcd.c         **** #if LCD_LINES==1
 295:lcd.c         ****     addressCounter = 0;
 296:lcd.c         **** #endif
 297:lcd.c         **** #if LCD_LINES==2
 298:lcd.c         ****     if ( pos < (LCD_START_LINE2) )
 299:lcd.c         ****         addressCounter = LCD_START_LINE2;
 300:lcd.c         ****     else
 301:lcd.c         ****         addressCounter = LCD_START_LINE1;
 302:lcd.c         **** #endif
 303:lcd.c         **** #if LCD_LINES==4
 304:lcd.c         **** #if KS0073_4LINES_MODE
 305:lcd.c         ****     if ( pos < LCD_START_LINE2 )
 306:lcd.c         ****         addressCounter = LCD_START_LINE2;
 307:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
 308:lcd.c         ****         addressCounter = LCD_START_LINE3;
 309:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
 310:lcd.c         ****         addressCounter = LCD_START_LINE4;
 311:lcd.c         ****     else 
 312:lcd.c         ****         addressCounter = LCD_START_LINE1;
 313:lcd.c         **** #else
 314:lcd.c         ****     if ( pos < LCD_START_LINE3 )
 315:lcd.c         ****         addressCounter = LCD_START_LINE2;
 316:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 317:lcd.c         ****         addressCounter = LCD_START_LINE3;
 318:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 319:lcd.c         ****         addressCounter = LCD_START_LINE4;
 320:lcd.c         ****     else 
 321:lcd.c         ****         addressCounter = LCD_START_LINE1;
 322:lcd.c         **** #endif
 323:lcd.c         **** #endif
 324:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 325:lcd.c         **** 
 326:lcd.c         **** }/* lcd_newline */
 327:lcd.c         **** 
 328:lcd.c         **** 
 329:lcd.c         **** /*
 330:lcd.c         **** ** PUBLIC FUNCTIONS 
 331:lcd.c         **** */
 332:lcd.c         **** 
 333:lcd.c         **** /*************************************************************************
 334:lcd.c         **** Send LCD controller instruction command
 335:lcd.c         **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 336:lcd.c         **** Returns: none
 337:lcd.c         **** *************************************************************************/
 338:lcd.c         **** void lcd_command(uint8_t cmd)
 339:lcd.c         **** {
 313               		.loc 1 339 0
 314               		.cfi_startproc
 315               	.LVL21:
 316 00e0 CF93      		push r28
 317               	.LCFI4:
 318               		.cfi_def_cfa_offset 3
 319               		.cfi_offset 28, -2
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 1 */
 323               	.L__stack_usage = 1
 324 00e2 C82F      		mov r28,r24
 340:lcd.c         ****     lcd_waitbusy();
 325               		.loc 1 340 0
 326 00e4 0E94 0000 		call lcd_waitbusy
 327               	.LVL22:
 341:lcd.c         ****     lcd_write(cmd,0);
 328               		.loc 1 341 0
 329 00e8 60E0      		ldi r22,0
 330 00ea 8C2F      		mov r24,r28
 331               	/* epilogue start */
 342:lcd.c         **** }
 332               		.loc 1 342 0
 333 00ec CF91      		pop r28
 334               	.LVL23:
 341:lcd.c         ****     lcd_write(cmd,0);
 335               		.loc 1 341 0
 336 00ee 0C94 0000 		jmp lcd_write
 337               	.LVL24:
 338               		.cfi_endproc
 339               	.LFE12:
 341               	.global	lcd_data
 343               	lcd_data:
 344               	.LFB13:
 343:lcd.c         **** 
 344:lcd.c         **** 
 345:lcd.c         **** /*************************************************************************
 346:lcd.c         **** Send data byte to LCD controller 
 347:lcd.c         **** Input:   data to send to LCD controller, see HD44780 data sheet
 348:lcd.c         **** Returns: none
 349:lcd.c         **** *************************************************************************/
 350:lcd.c         **** void lcd_data(uint8_t data)
 351:lcd.c         **** {
 345               		.loc 1 351 0
 346               		.cfi_startproc
 347               	.LVL25:
 348 00f2 CF93      		push r28
 349               	.LCFI5:
 350               		.cfi_def_cfa_offset 3
 351               		.cfi_offset 28, -2
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 1 */
 355               	.L__stack_usage = 1
 356 00f4 C82F      		mov r28,r24
 352:lcd.c         ****     lcd_waitbusy();
 357               		.loc 1 352 0
 358 00f6 0E94 0000 		call lcd_waitbusy
 359               	.LVL26:
 353:lcd.c         ****     lcd_write(data,1);
 360               		.loc 1 353 0
 361 00fa 61E0      		ldi r22,lo8(1)
 362 00fc 8C2F      		mov r24,r28
 363               	/* epilogue start */
 354:lcd.c         **** }
 364               		.loc 1 354 0
 365 00fe CF91      		pop r28
 366               	.LVL27:
 353:lcd.c         ****     lcd_write(data,1);
 367               		.loc 1 353 0
 368 0100 0C94 0000 		jmp lcd_write
 369               	.LVL28:
 370               		.cfi_endproc
 371               	.LFE13:
 373               	.global	lcd_gotoxy
 375               	lcd_gotoxy:
 376               	.LFB14:
 355:lcd.c         **** 
 356:lcd.c         **** 
 357:lcd.c         **** 
 358:lcd.c         **** /*************************************************************************
 359:lcd.c         **** Set cursor to specified position
 360:lcd.c         **** Input:    x  horizontal position  (0: left most position)
 361:lcd.c         ****           y  vertical position    (0: first line)
 362:lcd.c         **** Returns:  none
 363:lcd.c         **** *************************************************************************/
 364:lcd.c         **** void lcd_gotoxy(uint8_t x, uint8_t y)
 365:lcd.c         **** {
 377               		.loc 1 365 0
 378               		.cfi_startproc
 379               	.LVL29:
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 366:lcd.c         **** #if LCD_LINES==1
 367:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 368:lcd.c         **** #endif
 369:lcd.c         **** #if LCD_LINES==2
 370:lcd.c         ****     if ( y==0 ) 
 384               		.loc 1 370 0
 385 0104 6111      		cpse r22,__zero_reg__
 386 0106 00C0      		rjmp .L72
 371:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 387               		.loc 1 371 0
 388 0108 8058      		subi r24,lo8(-(-128))
 389               	.LVL30:
 390 010a 00C0      		rjmp .L73
 391               	.LVL31:
 392               	.L72:
 372:lcd.c         ****     else
 373:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 393               		.loc 1 373 0
 394 010c 8054      		subi r24,lo8(-(-64))
 395               	.LVL32:
 396               	.L73:
 397 010e 0C94 0000 		jmp lcd_command
 398               	.LVL33:
 399               		.cfi_endproc
 400               	.LFE14:
 402               	.global	lcd_getxy
 404               	lcd_getxy:
 405               	.LFB15:
 374:lcd.c         **** #endif
 375:lcd.c         **** #if LCD_LINES==4
 376:lcd.c         ****     if ( y==0 )
 377:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 378:lcd.c         ****     else if ( y==1)
 379:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 380:lcd.c         ****     else if ( y==2)
 381:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 382:lcd.c         ****     else /* y==3 */
 383:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 384:lcd.c         **** #endif
 385:lcd.c         **** 
 386:lcd.c         **** }/* lcd_gotoxy */
 387:lcd.c         **** 
 388:lcd.c         **** 
 389:lcd.c         **** /*************************************************************************
 390:lcd.c         **** *************************************************************************/
 391:lcd.c         **** int lcd_getxy(void)
 392:lcd.c         **** {
 406               		.loc 1 392 0
 407               		.cfi_startproc
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
 393:lcd.c         ****     return lcd_waitbusy();
 412               		.loc 1 393 0
 413 0112 0E94 0000 		call lcd_waitbusy
 414               	.LVL34:
 394:lcd.c         **** }
 415               		.loc 1 394 0
 416 0116 90E0      		ldi r25,0
 417 0118 0895      		ret
 418               		.cfi_endproc
 419               	.LFE15:
 421               	.global	lcd_clrscr
 423               	lcd_clrscr:
 424               	.LFB16:
 395:lcd.c         **** 
 396:lcd.c         **** 
 397:lcd.c         **** /*************************************************************************
 398:lcd.c         **** Clear display and set cursor to home position
 399:lcd.c         **** *************************************************************************/
 400:lcd.c         **** void lcd_clrscr(void)
 401:lcd.c         **** {
 425               		.loc 1 401 0
 426               		.cfi_startproc
 427               	/* prologue: function */
 428               	/* frame size = 0 */
 429               	/* stack size = 0 */
 430               	.L__stack_usage = 0
 402:lcd.c         ****     lcd_command(1<<LCD_CLR);
 431               		.loc 1 402 0
 432 011a 81E0      		ldi r24,lo8(1)
 433 011c 0C94 0000 		jmp lcd_command
 434               	.LVL35:
 435               		.cfi_endproc
 436               	.LFE16:
 438               	.global	lcd_home
 440               	lcd_home:
 441               	.LFB17:
 403:lcd.c         **** }
 404:lcd.c         **** 
 405:lcd.c         **** 
 406:lcd.c         **** /*************************************************************************
 407:lcd.c         **** Set cursor to home position
 408:lcd.c         **** *************************************************************************/
 409:lcd.c         **** void lcd_home(void)
 410:lcd.c         **** {
 442               		.loc 1 410 0
 443               		.cfi_startproc
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 0 */
 447               	.L__stack_usage = 0
 411:lcd.c         ****     lcd_command(1<<LCD_HOME);
 448               		.loc 1 411 0
 449 0120 82E0      		ldi r24,lo8(2)
 450 0122 0C94 0000 		jmp lcd_command
 451               	.LVL36:
 452               		.cfi_endproc
 453               	.LFE17:
 455               	.global	lcd_putc
 457               	lcd_putc:
 458               	.LFB18:
 412:lcd.c         **** }
 413:lcd.c         **** 
 414:lcd.c         **** 
 415:lcd.c         **** /*************************************************************************
 416:lcd.c         **** Display character at current cursor position 
 417:lcd.c         **** Input:    character to be displayed                                       
 418:lcd.c         **** Returns:  none
 419:lcd.c         **** *************************************************************************/
 420:lcd.c         **** void lcd_putc(char c)
 421:lcd.c         **** {
 459               		.loc 1 421 0
 460               		.cfi_startproc
 461               	.LVL37:
 462 0126 CF93      		push r28
 463               	.LCFI6:
 464               		.cfi_def_cfa_offset 3
 465               		.cfi_offset 28, -2
 466               	/* prologue: function */
 467               	/* frame size = 0 */
 468               	/* stack size = 1 */
 469               	.L__stack_usage = 1
 470 0128 C82F      		mov r28,r24
 422:lcd.c         ****     uint8_t pos;
 423:lcd.c         **** 
 424:lcd.c         **** 
 425:lcd.c         ****     pos = lcd_waitbusy();   // read busy-flag and address counter
 471               		.loc 1 425 0
 472 012a 0E94 0000 		call lcd_waitbusy
 473               	.LVL38:
 426:lcd.c         ****     if (c=='\n')
 474               		.loc 1 426 0
 475 012e CA30      		cpi r28,lo8(10)
 476 0130 01F4      		brne .L78
 477               	.LVL39:
 478               	.LBB40:
 479               	.LBB41:
 298:lcd.c         ****     if ( pos < (LCD_START_LINE2) )
 480               		.loc 1 298 0
 481 0132 8034      		cpi r24,lo8(64)
 482 0134 00F4      		brsh .L80
 299:lcd.c         ****         addressCounter = LCD_START_LINE2;
 483               		.loc 1 299 0
 484 0136 80E4      		ldi r24,lo8(64)
 485               	.LVL40:
 486 0138 00C0      		rjmp .L79
 487               	.LVL41:
 488               	.L80:
 301:lcd.c         ****         addressCounter = LCD_START_LINE1;
 489               		.loc 1 301 0
 490 013a 80E0      		ldi r24,0
 491               	.LVL42:
 492               	.L79:
 324:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 493               		.loc 1 324 0
 494 013c 8058      		subi r24,lo8(-(-128))
 495               	.LVL43:
 496               	/* epilogue start */
 497               	.LBE41:
 498               	.LBE40:
 427:lcd.c         ****     {
 428:lcd.c         ****         lcd_newline(pos);
 429:lcd.c         ****     }
 430:lcd.c         ****     else
 431:lcd.c         ****     {
 432:lcd.c         **** #if LCD_WRAP_LINES==1
 433:lcd.c         **** #if LCD_LINES==1
 434:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 435:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 436:lcd.c         ****         }
 437:lcd.c         **** #elif LCD_LINES==2
 438:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 439:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 440:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
 441:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 442:lcd.c         ****         }
 443:lcd.c         **** #elif LCD_LINES==4
 444:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 445:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 446:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 447:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 448:lcd.c         ****         }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 449:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 450:lcd.c         ****         }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 451:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 452:lcd.c         ****         }
 453:lcd.c         **** #endif
 454:lcd.c         ****         lcd_waitbusy();
 455:lcd.c         **** #endif
 456:lcd.c         ****         lcd_write(c, 1);
 457:lcd.c         ****     }
 458:lcd.c         **** 
 459:lcd.c         **** }/* lcd_putc */
 499               		.loc 1 459 0
 500 013e CF91      		pop r28
 501               	.LVL44:
 502               	.LBB43:
 503               	.LBB42:
 324:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 504               		.loc 1 324 0
 505 0140 0C94 0000 		jmp lcd_command
 506               	.LVL45:
 507               	.L78:
 508               	.LBE42:
 509               	.LBE43:
 456:lcd.c         ****         lcd_write(c, 1);
 510               		.loc 1 456 0
 511 0144 61E0      		ldi r22,lo8(1)
 512 0146 8C2F      		mov r24,r28
 513               	.LVL46:
 514               	/* epilogue start */
 515               		.loc 1 459 0
 516 0148 CF91      		pop r28
 517               	.LVL47:
 456:lcd.c         ****         lcd_write(c, 1);
 518               		.loc 1 456 0
 519 014a 0C94 0000 		jmp lcd_write
 520               	.LVL48:
 521               		.cfi_endproc
 522               	.LFE18:
 524               	.global	lcd_puts
 526               	lcd_puts:
 527               	.LFB19:
 460:lcd.c         **** 
 461:lcd.c         **** 
 462:lcd.c         **** /*************************************************************************
 463:lcd.c         **** Display string without auto linefeed 
 464:lcd.c         **** Input:    string to be displayed
 465:lcd.c         **** Returns:  none
 466:lcd.c         **** *************************************************************************/
 467:lcd.c         **** void lcd_puts(const char *s)
 468:lcd.c         **** /* print string on lcd (no auto linefeed) */
 469:lcd.c         **** {
 528               		.loc 1 469 0
 529               		.cfi_startproc
 530               	.LVL49:
 531 014e CF93      		push r28
 532               	.LCFI7:
 533               		.cfi_def_cfa_offset 3
 534               		.cfi_offset 28, -2
 535 0150 DF93      		push r29
 536               	.LCFI8:
 537               		.cfi_def_cfa_offset 4
 538               		.cfi_offset 29, -3
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 2 */
 542               	.L__stack_usage = 2
 543 0152 EC01      		movw r28,r24
 544               	.LVL50:
 545               	.L82:
 470:lcd.c         ****     register char c;
 471:lcd.c         **** 
 472:lcd.c         ****     while ( (c = *s++) ) {
 546               		.loc 1 472 0 discriminator 1
 547 0154 8991      		ld r24,Y+
 548               	.LVL51:
 549 0156 8823      		tst r24
 550 0158 01F0      		breq .L84
 473:lcd.c         ****         lcd_putc(c);
 551               		.loc 1 473 0
 552 015a 0E94 0000 		call lcd_putc
 553               	.LVL52:
 554 015e 00C0      		rjmp .L82
 555               	.LVL53:
 556               	.L84:
 557               	/* epilogue start */
 474:lcd.c         ****     }
 475:lcd.c         **** 
 476:lcd.c         **** }/* lcd_puts */
 558               		.loc 1 476 0
 559 0160 DF91      		pop r29
 560 0162 CF91      		pop r28
 561               	.LVL54:
 562 0164 0895      		ret
 563               		.cfi_endproc
 564               	.LFE19:
 566               	.global	lcd_puts_p
 568               	lcd_puts_p:
 569               	.LFB20:
 477:lcd.c         **** 
 478:lcd.c         **** 
 479:lcd.c         **** /*************************************************************************
 480:lcd.c         **** Display string from program memory without auto linefeed 
 481:lcd.c         **** Input:     string from program memory be be displayed                                        
 482:lcd.c         **** Returns:   none
 483:lcd.c         **** *************************************************************************/
 484:lcd.c         **** void lcd_puts_p(const char *progmem_s)
 485:lcd.c         **** /* print string from program memory on lcd (no auto linefeed) */
 486:lcd.c         **** {
 570               		.loc 1 486 0
 571               		.cfi_startproc
 572               	.LVL55:
 573 0166 CF93      		push r28
 574               	.LCFI9:
 575               		.cfi_def_cfa_offset 3
 576               		.cfi_offset 28, -2
 577 0168 DF93      		push r29
 578               	.LCFI10:
 579               		.cfi_def_cfa_offset 4
 580               		.cfi_offset 29, -3
 581               	/* prologue: function */
 582               	/* frame size = 0 */
 583               	/* stack size = 2 */
 584               	.L__stack_usage = 2
 585 016a FC01      		movw r30,r24
 586               	.LVL56:
 587               	.L86:
 588               	.LBB44:
 487:lcd.c         ****     register char c;
 488:lcd.c         **** 
 489:lcd.c         ****     while ( (c = pgm_read_byte(progmem_s++)) ) {
 589               		.loc 1 489 0 discriminator 1
 590               	/* #APP */
 591               	 ;  489 "lcd.c" 1
 592 016c 8491      		lpm r24, Z
 593               		
 594               	 ;  0 "" 2
 595               	.LVL57:
 596               	/* #NOAPP */
 597 016e EF01      		movw r28,r30
 598 0170 2196      		adiw r28,1
 599               	.LVL58:
 600               	.LBE44:
 601 0172 8823      		tst r24
 602 0174 01F0      		breq .L88
 490:lcd.c         ****         lcd_putc(c);
 603               		.loc 1 490 0
 604 0176 0E94 0000 		call lcd_putc
 605               	.LVL59:
 606 017a FE01      		movw r30,r28
 607 017c 00C0      		rjmp .L86
 608               	.LVL60:
 609               	.L88:
 610               	/* epilogue start */
 491:lcd.c         ****     }
 492:lcd.c         **** 
 493:lcd.c         **** }/* lcd_puts_p */
 611               		.loc 1 493 0
 612 017e DF91      		pop r29
 613 0180 CF91      		pop r28
 614               	.LVL61:
 615 0182 0895      		ret
 616               		.cfi_endproc
 617               	.LFE20:
 619               	.global	lcd_init
 621               	lcd_init:
 622               	.LFB21:
 494:lcd.c         **** 
 495:lcd.c         **** 
 496:lcd.c         **** /*************************************************************************
 497:lcd.c         **** Initialize display and select type of cursor 
 498:lcd.c         **** Input:    dispAttr LCD_DISP_OFF            display off
 499:lcd.c         ****                    LCD_DISP_ON             display on, cursor off
 500:lcd.c         ****                    LCD_DISP_ON_CURSOR      display on, cursor on
 501:lcd.c         ****                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
 502:lcd.c         **** Returns:  none
 503:lcd.c         **** *************************************************************************/
 504:lcd.c         **** void lcd_init(uint8_t dispAttr)
 505:lcd.c         **** {
 623               		.loc 1 505 0
 624               		.cfi_startproc
 625               	.LVL62:
 626 0184 CF93      		push r28
 627               	.LCFI11:
 628               		.cfi_def_cfa_offset 3
 629               		.cfi_offset 28, -2
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 1 */
 633               	.L__stack_usage = 1
 634 0186 C82F      		mov r28,r24
 506:lcd.c         **** #if LCD_IO_MODE
 507:lcd.c         ****     /*
 508:lcd.c         ****      *  Initialize LCD to 4 bit I/O mode
 509:lcd.c         ****      */
 510:lcd.c         ****      
 511:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 512:lcd.c         ****       && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT =
 513:lcd.c         ****       && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 514:lcd.c         ****       && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
 515:lcd.c         ****     {
 516:lcd.c         ****         /* configure all port bits as output (all LCD lines on same port) */
 517:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x7F;
 518:lcd.c         ****     }
 519:lcd.c         ****     else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( 
 520:lcd.c         ****            && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_P
 521:lcd.c         ****     {
 522:lcd.c         ****         /* configure all port bits as output (all LCD data lines on same port, but control lines on
 523:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
 524:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 525:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 526:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 527:lcd.c         ****     }
 528:lcd.c         ****     else
 529:lcd.c         ****     {
 530:lcd.c         ****         /* configure all port bits as output (LCD data and control lines on different ports */
 531:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 635               		.loc 1 531 0
 636 0188 389A      		sbi 0x7,0
 532:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 637               		.loc 1 532 0
 638 018a 399A      		sbi 0x7,1
 533:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 639               		.loc 1 533 0
 640 018c 3A9A      		sbi 0x7,2
 534:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 641               		.loc 1 534 0
 642 018e 529A      		sbi 0xa,2
 535:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 643               		.loc 1 535 0
 644 0190 539A      		sbi 0xa,3
 536:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 645               		.loc 1 536 0
 646 0192 549A      		sbi 0xa,4
 537:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 647               		.loc 1 537 0
 648 0194 559A      		sbi 0xa,5
 649               	.LVL63:
 650               	.LBB45:
 651               	.LBB46:
 652               		.loc 2 246 0
 653 0196 8FEF      		ldi r24,lo8(-1537)
 654 0198 99EF      		ldi r25,hi8(-1537)
 655 019a 0197      		1: sbiw r24,1
 656 019c 01F4      		brne 1b
 657               	.LVL64:
 658 019e 00C0      		rjmp .
 659 01a0 0000      		nop
 660               	.LBE46:
 661               	.LBE45:
 538:lcd.c         ****     }
 539:lcd.c         ****     delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
 540:lcd.c         ****     
 541:lcd.c         ****     /* initial write to lcd is 8bit */
 542:lcd.c         ****     LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 662               		.loc 1 542 0
 663 01a2 5B9A      		sbi 0xb,3
 543:lcd.c         ****     LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 664               		.loc 1 543 0
 665 01a4 5A9A      		sbi 0xb,2
 544:lcd.c         ****     lcd_e_toggle();
 666               		.loc 1 544 0
 667 01a6 0E94 0000 		call toggle_e
 668               	.LVL65:
 669               	.LBB47:
 670               	.LBB48:
 671               		.loc 2 246 0
 672 01aa 8FE1      		ldi r24,lo8(19999)
 673 01ac 9EE4      		ldi r25,hi8(19999)
 674 01ae 0197      		1: sbiw r24,1
 675 01b0 01F4      		brne 1b
 676 01b2 00C0      		rjmp .
 677 01b4 0000      		nop
 678               	.LBE48:
 679               	.LBE47:
 545:lcd.c         ****     delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
 546:lcd.c         ****    
 547:lcd.c         ****     /* repeat last command */ 
 548:lcd.c         ****     lcd_e_toggle();      
 680               		.loc 1 548 0
 681 01b6 0E94 0000 		call toggle_e
 682               	.LVL66:
 683               	.LBB49:
 684               	.LBB50:
 685               		.loc 2 246 0
 686 01ba 8FEF      		ldi r24,lo8(255)
 687 01bc 90E0      		ldi r25,hi8(255)
 688 01be 0197      		1: sbiw r24,1
 689 01c0 01F4      		brne 1b
 690 01c2 00C0      		rjmp .
 691 01c4 0000      		nop
 692               	.LBE50:
 693               	.LBE49:
 549:lcd.c         ****     delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
 550:lcd.c         ****     
 551:lcd.c         ****     /* repeat last command a third time */
 552:lcd.c         ****     lcd_e_toggle();      
 694               		.loc 1 552 0
 695 01c6 0E94 0000 		call toggle_e
 696               	.LVL67:
 697               	.LBB51:
 698               	.LBB52:
 699               		.loc 2 246 0
 700 01ca 8FEF      		ldi r24,lo8(255)
 701 01cc 90E0      		ldi r25,hi8(255)
 702 01ce 0197      		1: sbiw r24,1
 703 01d0 01F4      		brne 1b
 704 01d2 00C0      		rjmp .
 705 01d4 0000      		nop
 706               	.LBE52:
 707               	.LBE51:
 553:lcd.c         ****     delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
 554:lcd.c         **** 
 555:lcd.c         ****     /* now configure for 4bit mode */
 556:lcd.c         ****     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 708               		.loc 1 556 0
 709 01d6 5A98      		cbi 0xb,2
 557:lcd.c         ****     lcd_e_toggle();
 710               		.loc 1 557 0
 711 01d8 0E94 0000 		call toggle_e
 712               	.LVL68:
 713               	.LBB53:
 714               	.LBB54:
 715               		.loc 2 246 0
 716 01dc 8FEF      		ldi r24,lo8(255)
 717 01de 90E0      		ldi r25,hi8(255)
 718 01e0 0197      		1: sbiw r24,1
 719 01e2 01F4      		brne 1b
 720 01e4 00C0      		rjmp .
 721 01e6 0000      		nop
 722               	.LBE54:
 723               	.LBE53:
 558:lcd.c         ****     delay(LCD_DELAY_INIT_4BIT);          /* some displays need this additional delay */
 559:lcd.c         ****     
 560:lcd.c         ****     /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
 561:lcd.c         **** #else
 562:lcd.c         ****     /*
 563:lcd.c         ****      * Initialize LCD to 8 bit memory mapped mode
 564:lcd.c         ****      */
 565:lcd.c         ****     
 566:lcd.c         ****     /* enable external SRAM (memory mapped lcd) and one wait state */        
 567:lcd.c         ****     MCUCR = _BV(SRE) | _BV(SRW);
 568:lcd.c         **** 
 569:lcd.c         ****     /* reset LCD */
 570:lcd.c         ****     delay(LCD_DELAY_BOOTUP);                    /* wait 16ms after power-on     */
 571:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
 572:lcd.c         ****     delay(LCD_DELAY_INIT);                      /* wait 5ms                     */
 573:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
 574:lcd.c         ****     delay(LCD_DELAY_INIT_REP);                  /* wait 64us                    */
 575:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
 576:lcd.c         ****     delay(LCD_DELAY_INIT_REP);                  /* wait 64us                    */
 577:lcd.c         **** #endif
 578:lcd.c         **** 
 579:lcd.c         **** #if KS0073_4LINES_MODE
 580:lcd.c         ****     /* Display with KS0073 controller requires special commands for enabling 4 line mode */
 581:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
 582:lcd.c         **** 	lcd_command(KS0073_4LINES_MODE);
 583:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
 584:lcd.c         **** #else
 585:lcd.c         ****     lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 724               		.loc 1 585 0
 725 01e8 88E2      		ldi r24,lo8(40)
 726 01ea 0E94 0000 		call lcd_command
 727               	.LVL69:
 586:lcd.c         **** #endif
 587:lcd.c         ****     lcd_command(LCD_DISP_OFF);              /* display off                  */
 728               		.loc 1 587 0
 729 01ee 88E0      		ldi r24,lo8(8)
 730 01f0 0E94 0000 		call lcd_command
 731               	.LVL70:
 588:lcd.c         ****     lcd_clrscr();                           /* display clear                */ 
 732               		.loc 1 588 0
 733 01f4 0E94 0000 		call lcd_clrscr
 734               	.LVL71:
 589:lcd.c         ****     lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 735               		.loc 1 589 0
 736 01f8 86E0      		ldi r24,lo8(6)
 737 01fa 0E94 0000 		call lcd_command
 738               	.LVL72:
 590:lcd.c         ****     lcd_command(dispAttr);                  /* display/cursor control       */
 739               		.loc 1 590 0
 740 01fe 8C2F      		mov r24,r28
 741               	/* epilogue start */
 591:lcd.c         **** 
 592:lcd.c         **** }/* lcd_init */
 742               		.loc 1 592 0
 743 0200 CF91      		pop r28
 744               	.LVL73:
 590:lcd.c         ****     lcd_command(dispAttr);                  /* display/cursor control       */
 745               		.loc 1 590 0
 746 0202 0C94 0000 		jmp lcd_command
 747               	.LVL74:
 748               		.cfi_endproc
 749               	.LFE21:
 751               	.Letext0:
 752               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
               lcd.s:2      *ABS*:000000000000003e __SP_H__
               lcd.s:3      *ABS*:000000000000003d __SP_L__
               lcd.s:4      *ABS*:000000000000003f __SREG__
               lcd.s:5      *ABS*:0000000000000000 __tmp_reg__
               lcd.s:6      *ABS*:0000000000000001 __zero_reg__
               lcd.s:11     .text:0000000000000000 toggle_e
               lcd.s:40     .text:000000000000000e lcd_write
               lcd.s:166    .text:0000000000000078 lcd_read.constprop.0
               lcd.s:278    .text:00000000000000cc lcd_waitbusy
               lcd.s:311    .text:00000000000000e0 lcd_command
               lcd.s:343    .text:00000000000000f2 lcd_data
               lcd.s:375    .text:0000000000000104 lcd_gotoxy
               lcd.s:404    .text:0000000000000112 lcd_getxy
               lcd.s:423    .text:000000000000011a lcd_clrscr
               lcd.s:440    .text:0000000000000120 lcd_home
               lcd.s:457    .text:0000000000000126 lcd_putc
               lcd.s:526    .text:000000000000014e lcd_puts
               lcd.s:568    .text:0000000000000166 lcd_puts_p
               lcd.s:621    .text:0000000000000184 lcd_init

NO UNDEFINED SYMBOLS
