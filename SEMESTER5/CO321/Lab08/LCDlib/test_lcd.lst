   1               		.file	"test_lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	display
  12               	display:
  13               	.LFB7:
  14               		.file 1 "test_lcd.c"
   1:test_lcd.c    **** /*************************************************************************
   2:test_lcd.c    **** Title:    Testing output to a HD44780 based LCD display.
   3:test_lcd.c    **** Author:   Peter Fleury  <pfleury@gmx.ch>  http://tinyurl.com/peterfleury
   4:test_lcd.c    **** File:     $Id: test_lcd.c,v 1.8 2015/01/31 18:04:08 peter Exp $
   5:test_lcd.c    **** Software: AVR-GCC 4.x
   6:test_lcd.c    **** Hardware: HD44780 compatible LCD text display
   7:test_lcd.c    ****           AVR with external SRAM interface if memory-mapped LCD interface is used
   8:test_lcd.c    ****           any AVR with 7 free I/O pins if 4-bit IO port mode is used
   9:test_lcd.c    **** **************************************************************************/
  10:test_lcd.c    **** #include <stdlib.h>
  11:test_lcd.c    **** #include <avr/io.h>
  12:test_lcd.c    **** #include <avr/pgmspace.h>
  13:test_lcd.c    **** #include <util/delay.h>
  14:test_lcd.c    **** #include "lcd.h"
  15:test_lcd.c    **** 
  16:test_lcd.c    **** 
  17:test_lcd.c    **** /*
  18:test_lcd.c    **** ** constant definitions
  19:test_lcd.c    **** */
  20:test_lcd.c    **** static const PROGMEM unsigned char copyRightChar[] =
  21:test_lcd.c    **** {
  22:test_lcd.c    ****   0x07, 0x08, 0x13, 0x14, 0x14, 0x13, 0x08, 0x07,
  23:test_lcd.c    ****   0x00, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x00
  24:test_lcd.c    **** };
  25:test_lcd.c    **** 
  26:test_lcd.c    **** void display(int n, char words[]){
  15               		.loc 1 26 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  30 0004 EB01      		movw r28,r22
  27:test_lcd.c    **** 
  28:test_lcd.c    ****     if (n == 1){
  31               		.loc 1 28 0
  32 0006 8130      		cpi r24,1
  33 0008 9105      		cpc r25,__zero_reg__
  34 000a 01F0      		breq .L4
  29:test_lcd.c    ****         /* put string to display (line 1) with linefeed */
  30:test_lcd.c    ****         lcd_puts(words);
  31:test_lcd.c    ****     }
  32:test_lcd.c    **** 
  33:test_lcd.c    ****     if (n == 2){
  35               		.loc 1 33 0
  36 000c 0297      		sbiw r24,2
  37 000e 01F4      		brne .L1
  38               	.LVL1:
  39               	.LBB8:
  40               	.LBB9:
  34:test_lcd.c    ****         /* put string to display (line 2) with linefeed */
  35:test_lcd.c    ****         lcd_putc('\n');
  41               		.loc 1 35 0
  42 0010 8AE0      		ldi r24,lo8(10)
  43               	.LVL2:
  44 0012 0E94 0000 		call lcd_putc
  45               	.LVL3:
  46               	.L4:
  36:test_lcd.c    ****         lcd_puts(words);
  47               		.loc 1 36 0
  48 0016 CE01      		movw r24,r28
  49               	/* epilogue start */
  50               	.LBE9:
  51               	.LBE8:
  37:test_lcd.c    ****     }
  38:test_lcd.c    **** 
  39:test_lcd.c    **** }
  52               		.loc 1 39 0
  53 0018 DF91      		pop r29
  54 001a CF91      		pop r28
  55               	.LVL4:
  56               	.LBB11:
  57               	.LBB10:
  36:test_lcd.c    ****         lcd_puts(words);
  58               		.loc 1 36 0
  59 001c 0C94 0000 		jmp lcd_puts
  60               	.LVL5:
  61               	.L1:
  62               	/* epilogue start */
  63               	.LBE10:
  64               	.LBE11:
  65               		.loc 1 39 0
  66 0020 DF91      		pop r29
  67 0022 CF91      		pop r28
  68 0024 0895      		ret
  69               		.cfi_endproc
  70               	.LFE7:
  72               	.global	displayChar
  74               	displayChar:
  75               	.LFB8:
  40:test_lcd.c    **** 
  41:test_lcd.c    **** void displayChar(int n, char c){
  76               		.loc 1 41 0
  77               		.cfi_startproc
  78               	.LVL6:
  79 0026 CF93      		push r28
  80               	.LCFI2:
  81               		.cfi_def_cfa_offset 3
  82               		.cfi_offset 28, -2
  83 0028 DF93      		push r29
  84               	.LCFI3:
  85               		.cfi_def_cfa_offset 4
  86               		.cfi_offset 29, -3
  87 002a 1F92      		push __zero_reg__
  88               	.LCFI4:
  89               		.cfi_def_cfa_offset 5
  90 002c CDB7      		in r28,__SP_L__
  91 002e DEB7      		in r29,__SP_H__
  92               	.LCFI5:
  93               		.cfi_def_cfa_register 28
  94               	/* prologue: function */
  95               	/* frame size = 1 */
  96               	/* stack size = 3 */
  97               	.L__stack_usage = 3
  42:test_lcd.c    **** 
  43:test_lcd.c    ****     if (n == 1){
  98               		.loc 1 43 0
  99 0030 8130      		cpi r24,1
 100 0032 9105      		cpc r25,__zero_reg__
 101 0034 01F0      		breq .L9
  44:test_lcd.c    ****         /* put string to display (line 1) with linefeed */
  45:test_lcd.c    ****         lcd_putc(c);
  46:test_lcd.c    ****     }
  47:test_lcd.c    **** 
  48:test_lcd.c    ****     if (n == 2){
 102               		.loc 1 48 0
 103 0036 0297      		sbiw r24,2
 104 0038 01F4      		brne .L6
 105               	.LVL7:
 106               	.LBB14:
 107               	.LBB15:
  49:test_lcd.c    ****         /* put string to display (line 2) with linefeed */
  50:test_lcd.c    ****         lcd_putc('\n');
 108               		.loc 1 50 0
 109 003a 8AE0      		ldi r24,lo8(10)
 110               	.LVL8:
 111 003c 6983      		std Y+1,r22
 112 003e 0E94 0000 		call lcd_putc
 113               	.LVL9:
  51:test_lcd.c    ****         lcd_putc(c);
 114               		.loc 1 51 0
 115 0042 6981      		ldd r22,Y+1
 116               	.LVL10:
 117               	.L9:
 118 0044 862F      		mov r24,r22
 119               	/* epilogue start */
 120               	.LBE15:
 121               	.LBE14:
  52:test_lcd.c    ****     }
  53:test_lcd.c    **** 
  54:test_lcd.c    **** }
 122               		.loc 1 54 0
 123 0046 0F90      		pop __tmp_reg__
 124 0048 DF91      		pop r29
 125 004a CF91      		pop r28
 126               	.LBB17:
 127               	.LBB16:
  51:test_lcd.c    ****         lcd_putc(c);
 128               		.loc 1 51 0
 129 004c 0C94 0000 		jmp lcd_putc
 130               	.LVL11:
 131               	.L6:
 132               	/* epilogue start */
 133               	.LBE16:
 134               	.LBE17:
 135               		.loc 1 54 0
 136 0050 0F90      		pop __tmp_reg__
 137 0052 DF91      		pop r29
 138 0054 CF91      		pop r28
 139 0056 0895      		ret
 140               		.cfi_endproc
 141               	.LFE8:
 143               		.section	.rodata.str1.1,"aMS",@progbits,1
 144               	.LC0:
 145 0000 456E 7465 		.string	"Enter the key :"
 145      7220 7468 
 145      6520 6B65 
 145      7920 3A00 
 146               		.section	.text.startup,"ax",@progbits
 147               	.global	main
 149               	main:
 150               	.LFB9:
  55:test_lcd.c    **** 
  56:test_lcd.c    **** int main(void){
 151               		.loc 1 56 0
 152               		.cfi_startproc
 153 0000 CF93      		push r28
 154               	.LCFI6:
 155               		.cfi_def_cfa_offset 3
 156               		.cfi_offset 28, -2
 157 0002 DF93      		push r29
 158               	.LCFI7:
 159               		.cfi_def_cfa_offset 4
 160               		.cfi_offset 29, -3
 161 0004 CDB7      		in r28,__SP_L__
 162 0006 DEB7      		in r29,__SP_H__
 163               	.LCFI8:
 164               		.cfi_def_cfa_register 28
 165 0008 6097      		sbiw r28,16
 166               	.LCFI9:
 167               		.cfi_def_cfa_offset 20
 168 000a 0FB6      		in __tmp_reg__,__SREG__
 169 000c F894      		cli
 170 000e DEBF      		out __SP_H__,r29
 171 0010 0FBE      		out __SREG__,__tmp_reg__
 172 0012 CDBF      		out __SP_L__,r28
 173               	/* prologue: function */
 174               	/* frame size = 16 */
 175               	/* stack size = 18 */
 176               	.L__stack_usage = 18
  57:test_lcd.c    **** 
  58:test_lcd.c    ****     char s[] = "Enter the key :"; 
 177               		.loc 1 58 0
 178 0014 80E1      		ldi r24,lo8(16)
 179 0016 E0E0      		ldi r30,lo8(.LC0)
 180 0018 F0E0      		ldi r31,hi8(.LC0)
 181 001a DE01      		movw r26,r28
 182 001c 1196      		adiw r26,1
 183               		0:
 184 001e 0190      		ld r0,Z+
 185 0020 0D92      		st X+,r0
 186 0022 8A95      		dec r24
 187 0024 01F4      		brne 0b
  59:test_lcd.c    **** 
  60:test_lcd.c    ****     lcd_init(LCD_DISP_ON);
 188               		.loc 1 60 0
 189 0026 8CE0      		ldi r24,lo8(12)
 190 0028 0E94 0000 		call lcd_init
 191               	.LVL12:
  61:test_lcd.c    **** 
  62:test_lcd.c    ****     /* clear display and home cursor */
  63:test_lcd.c    ****     lcd_clrscr();
 192               		.loc 1 63 0
 193 002c 0E94 0000 		call lcd_clrscr
 194               	.LVL13:
 195               	.LBB38:
 196               	.LBB39:
  30:test_lcd.c    ****         lcd_puts(words);
 197               		.loc 1 30 0
 198 0030 CE01      		movw r24,r28
 199 0032 0196      		adiw r24,1
 200 0034 0E94 0000 		call lcd_puts
 201               	.LVL14:
 202               	.LBE39:
 203               	.LBE38:
 204               	.LBB40:
 205               	.LBB41:
 206               	.LBB42:
  35:test_lcd.c    ****         lcd_putc('\n');
 207               		.loc 1 35 0
 208 0038 8AE0      		ldi r24,lo8(10)
 209 003a 0E94 0000 		call lcd_putc
 210               	.LVL15:
  36:test_lcd.c    ****         lcd_puts(words);
 211               		.loc 1 36 0
 212 003e CE01      		movw r24,r28
 213 0040 0196      		adiw r24,1
 214 0042 0E94 0000 		call lcd_puts
 215               	.LVL16:
 216               	.LBE42:
 217               	.LBE41:
 218               	.LBE40:
 219               	.LBB43:
 220               	.LBB44:
 221               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 222               		.loc 2 164 0
 223 0046 2FEF      		ldi r18,lo8(15999999)
 224 0048 83E2      		ldi r24,hi8(15999999)
 225 004a 94EF      		ldi r25,hlo8(15999999)
 226 004c 2150      		1: subi r18,1
 227 004e 8040      		sbci r24,0
 228 0050 9040      		sbci r25,0
 229 0052 01F4      		brne 1b
 230 0054 00C0      		rjmp .
 231 0056 0000      		nop
 232               	.LBE44:
 233               	.LBE43:
  64:test_lcd.c    **** 
  65:test_lcd.c    ****     display(1,s);
  66:test_lcd.c    ****     display(2,s);
  67:test_lcd.c    **** 
  68:test_lcd.c    ****     _delay_ms(5000);
  69:test_lcd.c    ****     lcd_clrscr();
 234               		.loc 1 69 0
 235 0058 0E94 0000 		call lcd_clrscr
 236               	.LVL17:
 237               	.LBB45:
 238               	.LBB46:
  45:test_lcd.c    ****         lcd_putc(c);
 239               		.loc 1 45 0
 240 005c 81E6      		ldi r24,lo8(97)
 241 005e 0E94 0000 		call lcd_putc
 242               	.LVL18:
 243               	.LBE46:
 244               	.LBE45:
 245               	.LBB47:
 246               	.LBB48:
 247               	.LBB49:
  50:test_lcd.c    ****         lcd_putc('\n');
 248               		.loc 1 50 0
 249 0062 8AE0      		ldi r24,lo8(10)
 250 0064 0E94 0000 		call lcd_putc
 251               	.LVL19:
  51:test_lcd.c    ****         lcd_putc(c);
 252               		.loc 1 51 0
 253 0068 81E6      		ldi r24,lo8(97)
 254 006a 0E94 0000 		call lcd_putc
 255               	.LVL20:
 256               	.LBE49:
 257               	.LBE48:
 258               	.LBE47:
 259               	.LBB50:
 260               	.LBB51:
 261               		.loc 2 164 0
 262 006e 2FEF      		ldi r18,lo8(15999999)
 263 0070 83E2      		ldi r24,hi8(15999999)
 264 0072 94EF      		ldi r25,hlo8(15999999)
 265 0074 2150      		1: subi r18,1
 266 0076 8040      		sbci r24,0
 267 0078 9040      		sbci r25,0
 268 007a 01F4      		brne 1b
 269 007c 00C0      		rjmp .
 270 007e 0000      		nop
 271               	.LBE51:
 272               	.LBE50:
  70:test_lcd.c    **** 
  71:test_lcd.c    ****     char c = 'a';
  72:test_lcd.c    ****     displayChar(1,c);
  73:test_lcd.c    ****     displayChar(2,c);
  74:test_lcd.c    **** 
  75:test_lcd.c    ****     _delay_ms(5000);
  76:test_lcd.c    **** 
  77:test_lcd.c    ****     
  78:test_lcd.c    **** }
 273               		.loc 1 78 0
 274 0080 80E0      		ldi r24,0
 275 0082 90E0      		ldi r25,0
 276               	/* epilogue start */
 277 0084 6096      		adiw r28,16
 278 0086 0FB6      		in __tmp_reg__,__SREG__
 279 0088 F894      		cli
 280 008a DEBF      		out __SP_H__,r29
 281 008c 0FBE      		out __SREG__,__tmp_reg__
 282 008e CDBF      		out __SP_L__,r28
 283 0090 DF91      		pop r29
 284 0092 CF91      		pop r28
 285 0094 0895      		ret
 286               		.cfi_endproc
 287               	.LFE9:
 289               		.text
 290               	.Letext0:
 291               		.file 3 "/usr/lib/avr/include/stdint.h"
 292               		.file 4 "lcd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 test_lcd.c
          test_lcd.s:2      *ABS*:000000000000003e __SP_H__
          test_lcd.s:3      *ABS*:000000000000003d __SP_L__
          test_lcd.s:4      *ABS*:000000000000003f __SREG__
          test_lcd.s:5      *ABS*:0000000000000000 __tmp_reg__
          test_lcd.s:6      *ABS*:0000000000000001 __zero_reg__
          test_lcd.s:12     .text:0000000000000000 display
          test_lcd.s:74     .text:0000000000000026 displayChar
          test_lcd.s:149    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
lcd_putc
lcd_puts
lcd_init
lcd_clrscr
__do_copy_data
